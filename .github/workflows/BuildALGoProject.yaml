name: 'Build AL-GO project'

on:
  workflow_call:
    inputs:
      shell:
        description: Shell in which you want to run the action (powershell or pwsh)
        required: false
        default: powershell
        type: string
      project:
        description: Name of the built project
        required: true
        type: string
      projectDependenciesJson:
        description: Dependencies of the built project in compressed Json format
        required: false
        default: '{}'
        type: string
      buildMode:
        description: Build mode used when building the artifacts
        required: true
        type: string
      secrets:
        description: A comma-separated string with the names of the secrets, reqired for the action
        required: false
        default: ''
        type: string
      publishArtifacts:
        description: Flag indicating whether the artifacts should be published
        required: false
        default: false
        type: boolean
      parentTelemetryScopeJson:
        description: Specifies the telemetry scope for the telemetry signal
        required: false
        type: string

jobs:
  BuildALGoProject:
    runs-on: [ windows-latest ]
    steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            lfs: true
      
        - name: Download thisbuild artifacts
          if: env.workflowDepth > 1
          uses: actions/download-artifact@v3
          with:
            path: '.dependencies'

        - name: Read settings
          uses: microsoft/AL-Go-Actions/ReadSettings@main
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            project: ${{ inputs.project }}

        - name: Read secrets
          uses: microsoft/AL-Go-Actions/ReadSecrets@main
          env:
            Secrets: ${{ inputs.secrets }}
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            settingsJson: ${{ env.Settings }}
            secrets: 'licenseFileUrl,insiderSasToken,codeSignCertificateUrl,codeSignCertificatePassword,keyVaultCertificateUrl,keyVaultCertificatePassword,keyVaultClientId,storageContext,gitHubPackagesContext'

        - name: Determine ArtifactUrl
          uses: microsoft/AL-Go/DetermineArtifactUrl@main
          id: determineArtifactUrl
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            settingsJson: ${{ env.Settings }}
            secretsJson: ${{ env.RepoSecrets }}

        - name: Cache Business Central Artifacts
          if: env.useCompilerFolder == 'True' && steps.determineArtifactUrl.outputs.ArtifactUrl && !contains(env.artifact,'INSIDERSASTOKEN')
          uses: actions/cache@v3
          with:
            path: .artifactcache
            key: ${{ steps.determineArtifactUrl.outputs.ArtifactUrl }}

        - name: Run pipeline
          id: RunPipeline
          uses: microsoft/AL-Go-Actions/RunPipeline@main
          env:
            BuildMode: ${{ inputs.buildMode }}
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            project: ${{ inputs.project }}
            projectDependenciesJson: ${{ inputs.projectDependenciesJson }}
            settingsJson: ${{ env.Settings }}
            secretsJson: ${{ env.RepoSecrets }}
            buildMode: ${{ inputs.buildMode }}

        - name: Calculate Artifact names
          id: calculateArtifactsNames
          uses: microsoft/AL-Go-Actions/CalculateArtifactNames@main
          if: success() || failure()
          with:
            shell: ${{ inputs.shell }}
            settingsJson: ${{ env.Settings }}
            project: ${{ inputs.project }}
            buildMode: ${{ inputs.buildMode }}
            branchName: ${{ github.ref_name }}

        - name: Upload thisbuild artifacts - apps
          if: env.workflowDepth > 1
          uses: actions/upload-artifact@v3
          with:
            name: ${{ steps.calculateArtifactsNames.outputs.ThisBuildAppsArtifactsName }}
            path: '${{ inputs.project }}/.buildartifacts/Apps/'
            if-no-files-found: ignore
            retention-days: 1

        - name: Upload thisbuild artifacts - test apps
          if: env.workflowDepth > 1
          uses: actions/upload-artifact@v3
          with:
            name: ${{ steps.calculateArtifactsNames.outputs.ThisBuildTestAppsArtifactsName }}
            path: '${{ inputs.project }}/.buildartifacts/TestApps/'
            if-no-files-found: ignore
            retention-days: 1
        
        - name: Publish artifacts - apps
          uses: actions/upload-artifact@v3
          if: inputs.publishArtifacts
          with:
            name: ${{ env.AppsArtifactsName }}
            path: '${{ matrix.project }}/.buildartifacts/Apps/'
            if-no-files-found: ignore

        - name: Publish artifacts - dependencies
          uses: actions/upload-artifact@v3
          if: inputs.publishArtifacts
          with:
            name: ${{ env.DependenciesArtifactsName }}
            path: '${{ matrix.project }}/.buildartifacts/Dependencies/'
            if-no-files-found: ignore

        - name: Publish artifacts - test apps
          uses: actions/upload-artifact@v3
          if: inputs.publishArtifacts
          with:
            name: ${{ env.TestAppsArtifactsName }}
            path: '${{ matrix.project }}/.buildartifacts/TestApps/'
            if-no-files-found: ignore

        - name: Publish artifacts - build output
          uses: actions/upload-artifact@v3
          if: (success() || failure()) && (hashFiles(format('{0}/BuildOutput.txt',inputs.project)) != '')
          with:
            name: ${{ env.BuildOutputArtifactsName }}
            path: '${{ inputs.project }}/BuildOutput.txt'
            if-no-files-found: ignore

        - name: Publish artifacts - container event log
          uses: actions/upload-artifact@v3
          if: (failure()) && (hashFiles(format('{0}/ContainerEventLog.evtx',inputs.project)) != '')
          with:
            name: ${{ env.ContainerEventLogArtifactsName }}
            path: '${{ inputs.project }}/ContainerEventLog.evtx'
            if-no-files-found: ignore

        - name: Publish artifacts - test results
          uses: actions/upload-artifact@v3
          if: (success() || failure()) && (hashFiles(format('{0}/TestResults.xml',inputs.project)) != '')
          with:
            name: ${{ env.TestResultsArtifactsName }}
            path: '${{ inputs.project }}/TestResults.xml'
            if-no-files-found: ignore

        - name: Publish artifacts - bcpt test results
          uses: actions/upload-artifact@v3
          if: (success() || failure()) && (hashFiles(format('{0}/bcptTestResults.json',inputs.project)) != '')
          with:
            name: ${{ env.BcptTestResultsArtifactsName }}
            path: '${{ inputs.project }}/bcptTestResults.json'
            if-no-files-found: ignore

        - name: Analyze Test Results
          id: analyzeTestResults
          if: success() || failure()
          uses: microsoft/AL-Go-Actions/AnalyzeTests@main
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            Project: ${{ inputs.project }}

        - name: Cleanup
          if: always()
          uses: microsoft/AL-Go-Actions/PipelineCleanup@main
          with:
            shell: ${{ inputs.shell }}
            parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
            Project: ${{ inputs.project }}
