name: Deploy PowerPlatform Solution
author: Microsoft Corporation
inputs:
  shell:
    description: Shell in which you want to run the action (powershell or pwsh)
    required: false
    default: powershell
  actionsRepo:
    description: The AL-Go for GitHub Actions repository
    required: true
  environmentName:
    description: Name of environment to deploy to
    required: true
  artifacts:
    description: Patch to the artifacts folder
    required: true
  deploymentEnvironmentsJson:
    description: The settings for all Deployment Environments
    required: true
runs:
  using: composite
  steps:
    - name: Install Power Platform Tools
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Get Actions Repo and Ref
      shell: ${{ inputs.shell }}
      env:
        _actionsRepo: ${{ inputs.actionsRepo }}
      run: |
        $ref = $env:_actionsRepo.Split('@')[1]
        $repo = $env:_actionsRepo.Split('@')[0]
        $path = './_AL-Go/Actions'
        if ($repo -like '*/Actions') {
          $repo = $repo -replace '/Actions', ''
          $path = './_AL-Go'
        }
        Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "repo=$repo"
        Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "ref=$ref"
        Add-Content -encoding utf8 -path $env:GITHUB_ENV -value "path=$path"

    - name: Check out AL-Go Actions
      uses: actions/checkout@v4
      with:
        repository: ${{ env.repo }}
        ref: ${{ env.ref }}
        path: ${{ env.path }}

    - name: Parse DeployToSettings and AuthContext
      uses: ./_AL-Go/Actions/ReadPowerPlatformSettings
      with:
        shell: ${{ inputs.shell }}
        deploymentEnvironmentsJson: ${{ inputs.deploymentEnvironmentsJson }} 

    - name: Who am I (username)
      if: env.ppUserName != ''
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{env.ppEnvironmentUrl}}
        user-name: ${{env.ppUserName}}
        password-secret: ${{env.ppPassword}}

    - name: Who am I (application ID)
      if: env.ppApplicationId != ''
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{env.ppEnvironmentUrl}}
        tenant-id: ${{env.ppTenantId}}
        app-id: ${{env.ppApplicationId}}
        client-secret: ${{env.ppClientSecret}}
 
    - name: Find Power Platform solution file
      env:
        _artifactPath: ${{inputs.artifactPath}}
      shell: ${{ inputs.shell }}
      run: |
        $artifactFiles = Get-ChildItem -Path $ENV:_artifactPath -Recurse -File | Select-Object -ExpandProperty FullName
        foreach($filePath in $artifactFiles){
            ## Find file containing Power Platform keyword
            if($filePath.contains("-PowerPlatformSolution-")){
                Write-Host "Power Platform solution file:"$filePath
                Add-Content -path $env:GITHUB_ENV -value "powerPlatformSolutionPath=$filePath" 
                return
            }
        }            
        Write-Warning "Not able to find Power Platform solution file in $ENV:_artifactPath"
        throw "Not able to find Power Platform solution file in $ENV:_artifactPath that contains the artifact keyword '-PowerPlatformSolution-'"
  
    - name: Unpack solution artifact
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: ${{ env.powerPlatformSolutionPath }}
        solution-folder: .artifacts/tempPPSolution/source
        solution-type: "Unmanaged"
        process-canvas-apps: true

    - name: Rebuild solution
      uses: ./_AL-Go/Actions/BuildPowerPlatform
      with:
        shell: ${{ inputs.shell }}
        solutionFolder: .artifacts/tempPPSolution/source
        outputFolder: .artifacts/tempPPSolution
        outputFileName: ppsolution
        companyId: ${{ env.companyId }}
        environmentName: ${{ env.environmentName }}

    - name: Publish solution to Power Platform (userName)
      if: env.ppUserName != ''
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        user-name: ${{env.ppUserName}}
        password-secret: ${{env.ppPassword}}
        environment-url: ${{env.ppEnvironmentUrl}}
        solution-file: .artifacts/tempPPSolution/ppsolution.zip
        force-overwrite: true
        publish-changes: true

    - name: Publish solution to Power Platform (ApplicationId)
      if: env.ppApplicationId != ''
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        environment-url: ${{env.ppEnvironmentUrl}}
        tenant-id: ${{env.ppTenantId}}
        app-id: ${{env.ppApplicationId}}
        client-secret: ${{env.ppClientSecret}}
        solution-file: .artifacts/tempPPSolution/ppsolution.zip
        force-overwrite: true
        publish-changes: true

branding:
  icon: terminal
  color: blue
